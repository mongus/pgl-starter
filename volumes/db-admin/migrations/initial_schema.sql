--
-- PostgreSQL database dump
--

-- Dumped from database version 17.3 (Debian 17.3-1.pgdg110+1)
-- Dumped by pg_dump version 17.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA :AUTH_SCHEMA;


--
-- Name: citext; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;


--
-- Name: EXTENSION citext; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION citext IS 'data type for case-insensitive character strings';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: jwt_token; Type: TYPE; Schema: auth; Owner: -
--

CREATE TYPE :AUTH_SCHEMA.jwt_token AS (
	role text,
	exp integer,
	uid :USER_ID_TYPE
);


--
-- Name: TYPE jwt_token; Type: COMMENT; Schema: auth; Owner: -
--

COMMENT ON TYPE :AUTH_SCHEMA.jwt_token IS 'JWT token injected by PostGraphile.';


--
-- Name: hash_password(text); Type: FUNCTION; Schema: auth; Owner: -
--

CREATE FUNCTION :AUTH_SCHEMA.hash_password(password text) RETURNS text
    LANGUAGE sql
    AS $$
      SELECT crypt(password, gen_salt('bf'));
    $$;


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: -
--

CREATE FUNCTION :AUTH_SCHEMA.uid() RETURNS :USER_ID_TYPE
    LANGUAGE sql
    AS $$
      SELECT NULLIF(CURRENT_SETTING('jwt.claims.uid', TRUE), ''):::USER_ID_TYPE;
    $$;


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: users; Type: TABLE; Schema: public; Owner: -
--

CREATE FUNCTION :EXPOSED_SCHEMA.graphile_migrate_init() RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
        user_id_default TEXT;
    BEGIN
        -- Pick id default based on user.id type
        user_id_default := CASE
            WHEN 'UUID'=':USER_ID_TYPE' THEN 'DEFAULT gen_random_uuid()'
            ELSE 'GENERATED BY DEFAULT AS IDENTITY'
        END;

        EXECUTE CONCAT('CREATE TABLE :EXPOSED_SCHEMA.users (
          id :USER_ID_TYPE PRIMARY KEY ', user_id_default, ',
          created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
          archived_at TIMESTAMPTZ
        );');
    END;
    $$;
SELECT :EXPOSED_SCHEMA.graphile_migrate_init();
DROP FUNCTION :EXPOSED_SCHEMA.graphile_migrate_init();

--
-- Name: authenticate(text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION :EXPOSED_SCHEMA.authenticate(username text, password text) RETURNS :AUTH_SCHEMA.jwt_token
    LANGUAGE plpgsql STRICT SECURITY DEFINER
    AS $_$
    DECLARE
      local_login :AUTH_SCHEMA.local_logins;
      user_id :USER_ID_TYPE;
    BEGIN
      IF $1 LIKE '%@%' THEN
        SELECT
         * INTO local_login
        FROM :AUTH_SCHEMA.local_logins l
        WHERE
         email = $1
         AND archived_at IS NULL
         AND CRYPT($2, l.password) = l.password;
      END IF;

      IF local_login IS NULL THEN
        SELECT
         * INTO local_login
        FROM :AUTH_SCHEMA.local_logins l
        WHERE
         l.username = $1
         AND archived_at IS NULL
         AND CRYPT($2, l.password) = l.password;
      END IF;

      IF local_login IS NULL THEN
        RETURN NULL;
      END IF;

      SELECT
       id INTO user_id
      FROM public.users
      WHERE
       id = local_login.user_id
       AND archived_at IS NULL;

      IF user_id IS NULL THEN
        RETURN NULL;
      END IF;

      RETURN (local_login.role, EXTRACT(EPOCH FROM NOW()) + (:JWT_TTL), user_id):::AUTH_SCHEMA.jwt_token;
    END;
    $_$;


--
-- Name: local_logins; Type: TABLE; Schema: auth; Owner: -
--

CREATE TABLE :AUTH_SCHEMA.local_logins (
    user_id :USER_ID_TYPE NOT NULL,
    username public.citext,
    email public.citext,
    password text DEFAULT 'EMPTY'::text NOT NULL,
    role text DEFAULT 'app_user'::text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    archived_at timestamp with time zone
);


--
-- Name: TABLE local_logins; Type: COMMENT; Schema: auth; Owner: -
--

COMMENT ON TABLE :AUTH_SCHEMA.local_logins IS 'Local (non-federated) login using username or email and password.';


--
-- Name: TABLE users; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE :EXPOSED_SCHEMA.users IS '@behavior -insert -delete';


--
-- Name: local_logins local_logins_email_key; Type: CONSTRAINT; Schema: auth; Owner: -
--

ALTER TABLE ONLY :AUTH_SCHEMA.local_logins
    ADD CONSTRAINT local_logins_email_key UNIQUE (email);


--
-- Name: local_logins local_logins_pkey; Type: CONSTRAINT; Schema: auth; Owner: -
--

ALTER TABLE ONLY :AUTH_SCHEMA.local_logins
    ADD CONSTRAINT local_logins_pkey PRIMARY KEY (user_id);


--
-- Name: local_logins local_logins_username_key; Type: CONSTRAINT; Schema: auth; Owner: -
--

ALTER TABLE ONLY :AUTH_SCHEMA.local_logins
    ADD CONSTRAINT local_logins_username_key UNIQUE (username);


--
-- Name: local_logins local_logins_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: -
--

ALTER TABLE ONLY :AUTH_SCHEMA.local_logins
    ADD CONSTRAINT local_logins_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: local_logins; Type: ROW SECURITY; Schema: auth; Owner: -
--

ALTER TABLE :AUTH_SCHEMA.local_logins ENABLE ROW LEVEL SECURITY;

--
-- Name: users owner_policy; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY owner_policy ON :EXPOSED_SCHEMA.users TO app_user USING ((id = :AUTH_SCHEMA.uid()));


--
-- Name: users; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE :EXPOSED_SCHEMA.users ENABLE ROW LEVEL SECURITY;

--
-- Name: TABLE users; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT ON TABLE :EXPOSED_SCHEMA.users TO app_user;


--
-- PostgreSQL database dump complete
--

CREATE INDEX users_created_at_idx ON :EXPOSED_SCHEMA.users(created_at);
COMMENT ON COLUMN :EXPOSED_SCHEMA.users.created_at IS '@behavior -insert -update';
COMMENT ON COLUMN :EXPOSED_SCHEMA.users.archived_at IS '@behavior -insert';