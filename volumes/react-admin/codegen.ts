import type { CodegenConfig } from '@graphql-codegen/cli'

const config: CodegenConfig = {
    schema: 'schema.graphql',
    documents: ['src/**/gql.ts'],
    generates: {
        'src/generated/apollo-helpers.ts': {
            plugins: ['typescript-apollo-client-helpers']
        },

        'src/generated/graphql/': {
            preset: 'client',
            presetConfig: {
                fragmentMasking: false,
            },
            plugins: [
                {
                    add: {
                        content: `/** THIS FILE IS AUTO-GENERATED **/
/** DO NOT EDIT **/
/* eslint-disable */
`
                    }
                }
            ]
        }
    },
    config: {
        /**
         * We do not want to change the naming convention of our types and want it to follow the same convention
         * as that of our schema. So we pass `keep` as the value to this field. If we do not pass this,
         * there are some unwanted naming conventions added to our types such as:
         * converting all our enum values to UPPER_SNAKE_CASE which can lead to conflicts.
         */
        namingConvention: 'keep',
        /**
         * We do not want to make our query or mutation fields optional(?).
         * Hence, we pass the value of `field` of `avoidOptionals` as true. If we don't do this,
         * any null value field will become optional.
         */
        avoidOptionals: {
            field: true,
        },
        /**
         * By default, `__typename` is an optional field. But we want to override it
         * to make it a required field in all our selection sets. Hence we pass it as true.
         */
        nonOptionalTypename: true,
        /**
         * By default, the Queries and Mutations types also have __typename fields like:
         * ```
         * export interface SearchTermQuery {
         *  __typename: 'Query';
         * readonly search: ...;
         * }
         * ```
         * So, we pass true as a value to this field to avoid `__typename` in the root fields.
         */
        skipTypeNameForRoot: true,
        /**
         * Makes all the query and mutation fields `readonly`.
         * This is equivalent to the `useReadOnlyTypes`
         * flag of Apollo Codegen
         */
        immutableTypes: true,
        /**
         * Apollo Codegen used to generate interfaces by default.
         * Hence we pass `interface` as the value to this field.
         */
        declarationKind: 'interface',
        /**
         * If we omit this field, all query names will have "Query" as a suffix.
         * However, since we already follow the convention of adding "Query" as
         * a suffix to our query names, this may not be necessary.
         * But, even after passing this, if some query or mutation names
         * are not suffixed with "Query" or "Mutation", the codegen will
         * automatically add the appropriate suffix.
         */
        dedupeOperationSuffix: true,
        /**
         * This field prevents the generation of all fields in our schema.json.
         * Only the fields used in our GraphQL documents are generated.
         */
        onlyOperationTypes: true,
        /**
         * By GraphQL convention any query fields which are arrays have type
         * `ReadonlyArray<T> | <T>` which is the default type generated by GraphQL code generator.
         * But since Apollo Codegen used to generate them only as arrays i.e `ReadonlyArray<T>`,
         * we pass this field as true to avoid any typescript errors.
         */
        arrayInputCoercion: false,
        /**
         * We pass all the custom scalars and their types that we want to define other
         * than common GraphQL types to this field.
         */
        scalars: {
            Long: 'number',
        },
    }
}
export default config;